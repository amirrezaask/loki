#load "base.loki" // Load directive loads a loki file as a part of compilation

State :: enum {
    Alive,
    Dead
}

Human :: struct {
    age: int,
    name: string,
    state: State,
}

foreign_constant: int #foreign;

top_level_uint_constant :: 1


main :: () int {
    
    state := State.Alive;
    
    z := top_level_uint_constant;

    uu := someUknownConst;
    
    y := 10;
    x := y;
    
    infer_bool := 1 == 1;
    number := 0;

    number++;
    number--;
    number = number + 10;
    number+=10;
    number-=3;
    number*=2;
    number/=3;
    number%=1;
    
    some_bool := true;
    
    c :: 'c';
    
    s :: "Amirreza";

    a: bool;
    a = true;

    amirreza := Human {
        age = 24,
        name = "amirreza",
    };

    amirreza.age = 25;

    printf("amirreza age is %d\n", amirreza.age);
    printf("inline age is %d\n", Human {age = 16, name = "comrade"}.age);

    counter := 0;
    while (counter < 10) {
        printf("while loop using counter: %d\n", counter);
        counter++;
    }

    for (i:=0;i<10;i++) {
        printf("for c syntax: %d\n", i);
    }

    numbers := [10]uint{1, 2, 3, 4};
    for (num in numbers) {
        printf("for each syntax: %d\n", num);
    }
    humans := [3]Human {amirreza, Human { age = 17, name = "comrade" }};
    for (humans) {
        printf("for each syntax: %d\n", it.age);
    }
    
    for (numbers) {
        printf("for each syntax: %d\n", it);
    }
    b := 1;
    if (b == 1) {
        printf("b1 is true\n");
    } 
    else if (b == 2) {
        printf("b is two\n");
    }
     else {
        printf("b1 is false\n");
    }

    this_sum :: sum(1, 2);
    printf("function call sum %d\n", this_sum);


    value := 2;
    ptr_to_value := &value;
    printf("value is %d\n", value);
    *ptr_to_value = 3;
    printf("value is %d\n", value);
    printf("value is %d\n", *ptr_to_value);

    human_ptr := &Human {
        age = 24,
        name = "amirreza",
    };

    printf("human_ptr age is %d\n", (*human_ptr).age);
    return 0;
}
