#load "base.loki"; // Load directive loads a loki file as a part of compilation

/* #host "iostream"; // host directive is for when you want to import something from your target platform. */

// This is a comment

/*
   This is also a comment
*/

State :: enum {
    Alive,
    Dead
};

Human :: struct {
    age: int,
    name: string,
    state: State,
};

top_level_uint_constant :: 1;

main :: () int {

    state := State.Alive;
    
    z := top_level_uint_constant;

    uu := someUknownConst;
    
    y := 10;
    x := y;
    
    infer_bool := 1 == 1;
    number := 0;

    number++;
    number--;
    number = number + 10;
    number+=10;
    number-=3;
    number*=2;
    number/=3;
    number%=1;
    
    b := true;
    
    c :: 'c';
    
    s :: "Amirreza";

    a: bool;
    a = true;

    amirreza := Human {
        age = 24,
        name = "amirreza",
        /* state = State.Alive, */
    };

    amirreza.age = 25;

    /*parsa : Human : .{
        age = 17,
        name = "parsa",
    };*/

    printf("amirreza age is %d\n", amirreza.age);
    printf("inline age is %d\n", Human {age = 16, name = "comrade"}.age);
    //printf("parsa age is %d\n", parsa.age);


    counter := 0;
    while (counter < 10) {
        printf("while loop using counter: %d\n", counter);
        counter++;
    }

    for (i:=0;i<10;i++) {
        printf("for c syntax: %d\n", i);
    }

    numbers := [10]uint{1, 2, 3, 4};
    for (num in numbers) {
        printf("for each syntax: %d\n", num);
    }
    humans := [3]Human {amirreza, Human { age = 17, name = "comrade" }};
    for (humans) {
        printf("for each syntax: %d\n", it.age);
    }
    
    for (numbers) {
        printf("for each syntax: %d\n", it);
    }

    if (b) {
        printf("b1 is true\n");
    }
    else {
        printf("b1 is false\n");
    }

    return 0;
};
