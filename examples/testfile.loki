#load "print"
#load "c_allocator"

DEFAULT_DYNAMIC_ARRAY_SIZE :: 2;

DynamicArray :: struct {
    elements: **void,
    count: s64,
    cap: s64,
    element_size: s64,
}

dynamic_array_new :: (element_size: uint) *DynamicArray {
    ptr := malloc(#size(DynamicArray));
    array := #cast(ptr, *DynamicArray)

	array.cap = DEFAULT_DYNAMIC_ARRAY_SIZE;
    *array.elements = malloc(#size(*void)*array.cap);
    array.count = 0;
    array.element_size = element_size;
    return array;
}

dyanmic_array_add :: (array: *DynamicArray, element: *void) void {
    if (array.count == array.cap) {
        // copy elements to a bigger array 
        array.cap *= 2;
        new_ptr := realloc(array.elements, array.cap * #size(*void))
        array.elements = #cast(new_ptr, **void);
    }
    // BUG: type inference somehow thinks of the sum as boolean ?
    dst: int;
    dst = #cast(array.elements, int) + #cast((array.count * array.element_size), int);
    memcpy(#cast(dst, *void), element, array.element_size);
    array.count++;
    
}

dynamic_array_free :: (a: *DynamicArray) {
    free(a.elements);
    a.elements = 0;
    a.count = 0;
    a.cap = 0;
}

Human :: struct {
    age: int
}

main :: () int {
	array := dynamic_array_new(#size(int));
    // amirreza := Human {
    //     age = 10
    // }
    a : int = 1;
	dyanmic_array_add(array, &a);
    printf("array cap: %d\n", array.cap);
    printf("array size: %d\n", array.count);
    a_ptr := #cast(array.elements[1], *int);
    printf("int : %d\n", *a_ptr);
}