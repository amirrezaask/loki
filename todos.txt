- after compiler::infer_types and compiler::type_check we should produce Bytecode and code gen should use IR instead of AST.
  - Bytecode is a fully check both in terms of semantics and types.
  - it's the simplest instruction set possible.
  - when lowering into byte code we should re order stuff based on dependency.

- initializers should just generate code to set each field seperately
- enums should not depend on host language, they should just be normal constants.

- arrays:
  - dynamic array
  - strings should be our own dynamicarray impl. 
  - variadic args
  - slicing arrays

- defer
    *each function that have a defer usage, will have a label at the end (with a guard) so when user does return we first jump to defer run the instructions and then we come back and return.

- type casting using as keyword

- finish error-system branch

- unions

- load files into a namespace

- generics

- memory stuff


